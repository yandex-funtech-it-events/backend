# Generated by Django 4.2 on 2024-04-04 10:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name="дата обновления"
                    ),
                ),
                (
                    "registration_open",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="дата открытия регистрации"
                    ),
                ),
                (
                    "registration_close",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="дата закрытия регистрации"
                    ),
                ),
                (
                    "date_start",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="дата начала мероприятия",
                    ),
                ),
                (
                    "date_end",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="дата окончания мероприятия",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Почта"
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        max_length=150, verbose_name="Пароль пользователя"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="Имя пользователя"),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=150, verbose_name="Фамилия пользователя"
                    ),
                ),
                (
                    "role",
                    models.TextField(
                        choices=[
                            ("attendee", "Участник"),
                            ("organizer", "Организатор"),
                            ("moderator", "Модератор"),
                        ],
                        default="attendee",
                        max_length=150,
                        verbose_name="Пользовательская роль",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        related_name="custom_users_groups", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        related_name="custom_users_permissions", to="auth.permission"
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "ordering": ["-id"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
